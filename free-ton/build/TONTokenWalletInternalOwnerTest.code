.macro constructor
DROP
GETGLOB 8
ISNULL
IFREF {
	CALL $c4_to_c7_with_init_storage$
}
;; constructor protection
GETGLOB 6
THROWIF 51
PUSHINT 1
SETGLOB 6
;; end constructor protection
ENDS
; constructor TONTokenWalletInternalOwnerTest
ACCEPT
; end constructor TONTokenWalletInternalOwnerTest
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro tokensReceivedCallback
DROP
GETGLOB 8
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
LDUQ 128
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 128
}
IFNOT
LDUQ 256
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 256
}
IFNOT
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
LDUQ 128
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 128
}
IFNOT
;; decode TvmCell
LDREF
ENDS
;; param: token_wallet
;; param: 
;; param: amount
;; param: sender_public_key
;; param: sender_address
;; param: 
;; param: original_gas_to
;; param: 
;; param: 
; function tokensReceivedCallback
;; map.exists
;; push identifier token_wallet
PUSH S8
;; push identifier change_directions
GETGLOB 13
PUSHINT 267
DICTGET
DUP
PUSHCONT {
	NIP
}
IF
THROWIFNOT 100
;; get member balance
GETPARAM 7
INDEX 0
;; -
;; get member value
CALLREF {
	CALL $message_balance_macro$
}
SUB
UFITS 128
PUSHINT 2
RAWRESERVE
PUSHREF {
}
;; decl: empty
;; Remote call ITONTokenWallet.transferToRecipient
;; map.at
;; push identifier token_wallet
PUSH S9
;; push identifier change_directions
GETGLOB 13
PUSHINT 267
DICTGET
THROWIFNOT 50
NEWC
STSLICECONST x62_
STSLICE
PUSHINT 1
STUR 111
NEWC
STSLICECONST x3f10d1ab
;; recipient_public_key
;; push identifier sender_public_key
PUSH S8
STUR 256
;; recipient_address
;; push identifier sender_address
PUSH S7
STSLICER
;; tokens
;; push identifier amount
PUSH S9
STUR 128
;; deploy_grams
PUSHINT 50000000
NEWC
STU 128
;; transfer_grams
PUSHINT 128
STZEROES
;; send_gas_to
;; push identifier original_gas_to
PUSH S6
STSLICER
;; notify_receiver
STZERO
;; payload
;; push identifier empty
PUSH S3
STREFR
STBREFR
STBREFR
ENDC
PUSHINT 128
SENDRAWMSG
; end function tokensReceivedCallback
BLKDROP 10
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro tokensBouncedCallback
DROP
GETGLOB 8
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
LDUQ 128
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 128
}
IFNOT
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
LDUQ 128
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 128
}
IFNOT
ENDS
;; param: 
;; param: 
;; param: 
;; param: bounced_from
;; param: 
; function tokensBouncedCallback
; expValue
; end expValue
;; push identifier bounced_from
; colValue
; end colValue
; end function tokensBouncedCallback
DROP
SETGLOB 14
BLKDROP 3
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro subscribeForTransfers
DROP
GETGLOB 8
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
ENDS
;; param: wallet1
;; param: wallet2
; modifier onlyExternalOwner
;; push identifier error_message_sender_is_not_my_owner
GETGLOB 12
DUP
LESSINT 2
PUSHCONT {
	DROP
	PUSHINT 100
}
IF
; function isExternalOwner
;; return
;; push identifier external_owner_pubkey_
GETGLOB 11
NEQINT 0
;; short-circuiting &&
DUP
PUSHCONT {
	DROP
	;; push identifier external_owner_pubkey_
	GETGLOB 11
	;; ==
	GETGLOB 5
	DUP
	ISNULL
	PUSHCONT {
		DROP
		PUSHINT 0
	}
	IF
	EQUAL
}
IF
; end function isExternalOwner
THROWANYIFNOT
; function subscribeForTransfers
ACCEPT
; expValue
;; fetch change_directions
;; push identifier wallet1
PUSH S1
GETGLOB 13
; end expValue
;; push identifier wallet2
PUSH S2
; colValue
ROTREV
PUSHINT 267
DICTSET
; end colValue
; expValue
;; fetch change_directions
DUP
SETGLOB 13
;; push identifier wallet2
PUSH S1
SWAP
; end expValue
;; push identifier wallet1
PUSH S3
; colValue
ROTREV
PUSHINT 267
DICTSET
SETGLOB 13
; end colValue
;; Remote call ITONTokenWallet.setReceiveCallback
;; push identifier wallet1
PUSH S1
NEWC
STSLICECONST x62_
STSLICE
PUSHSLICE x3989680000000000000000000000000003_
STSLICER
NEWC
STSLICECONST x71eee875
;; receive_callback
MYADDR
STSLICER
;; allow_non_notifiable
STONE
STBREFR
ENDC
PUSHINT 0
SENDRAWMSG
;; Remote call ITONTokenWallet.setBouncedCallback
;; push identifier wallet1
PUSH S1
NEWC
STSLICECONST x62_
STSLICE
PUSHSLICE x3989680000000000000000000000000003_
STSLICER
NEWC
STSLICECONST x05c5000f
;; bounced_callback
MYADDR
STSLICER
STBREFR
ENDC
PUSHINT 0
SENDRAWMSG
;; Remote call ITONTokenWallet.setReceiveCallback
;; push identifier wallet2
DUP
NEWC
STSLICECONST x62_
STSLICE
PUSHSLICE x3989680000000000000000000000000003_
STSLICER
NEWC
STSLICECONST x71eee875
;; receive_callback
MYADDR
STSLICER
;; allow_non_notifiable
STONE
STBREFR
ENDC
PUSHINT 0
SENDRAWMSG
;; Remote call ITONTokenWallet.setBouncedCallback
;; push identifier wallet2
DUP
NEWC
STSLICECONST x62_
STSLICE
PUSHSLICE x3989680000000000000000000000000003_
STSLICER
NEWC
STSLICECONST x05c5000f
;; bounced_callback
MYADDR
STSLICER
STBREFR
ENDC
PUSHINT 0
SENDRAWMSG
; end function subscribeForTransfers
; end modifier onlyExternalOwner
DROP2
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro burnMyTokens
DROP
LDUQ 128
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 128
}
IFNOT
LDUQ 128
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 128
}
IFNOT
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
LDUQ 160
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 160
}
IFNOT
ENDS
;; param: tokens
;; param: grams
;; param: burner_address
;; param: callback_address
;; param: ethereum_address
; modifier onlyExternalOwner
;; push identifier error_message_sender_is_not_my_owner
GETGLOB 12
DUP
LESSINT 2
PUSHCONT {
	DROP
	PUSHINT 100
}
IF
; function isExternalOwner
;; return
;; push identifier external_owner_pubkey_
GETGLOB 11
NEQINT 0
;; short-circuiting &&
DUP
PUSHCONT {
	DROP
	;; push identifier external_owner_pubkey_
	GETGLOB 11
	;; ==
	GETGLOB 5
	DUP
	ISNULL
	PUSHCONT {
		DROP
		PUSHINT 0
	}
	IF
	EQUAL
}
IF
; end function isExternalOwner
THROWANYIFNOT
; function burnMyTokens
;; push identifier ethereum_address
DUP
THROWIFNOT 100
ACCEPT
NEWC
;; decl: builder
; expValue
; end expValue
;; push identifier ethereum_address
DUP2
STU 160
; colValue
NIP
; end colValue
;; push identifier builder
DUP
ENDC
;; decl: callback_payload
;; Remote call ITokensBurner.burnMyTokens
;; push identifier grams
;; push identifier burner_address
BLKPUSH 2, 5
NEWC
STSLICECONST x62_
STSLICE
SWAP
STGRAMS
PUSHINT 1
STUR 107
NEWC
STSLICECONST x67a80dcf
;; tokens
;; push identifier tokens
PUSH S8
STUR 128
;; send_gas_to
MYADDR
STSLICER
NEWC
;; callback_address
;; push identifier callback_address
PUSH S6
STSLICER
;; callback_payload
;; push identifier callback_payload
PUSH S3
STREFR
STBREFR
STBREFR
ENDC
PUSHINT 0
SENDRAWMSG
; end function burnMyTokens
; end modifier onlyExternalOwner
BLKDROP 7
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro testTransferFrom
DROP
LDUQ 128
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 128
}
IFNOT
LDUQ 128
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 128
}
IFNOT
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
ENDS
;; param: tokens
;; param: grams
;; param: from
;; param: to
;; param: wallet
; modifier onlyExternalOwner
;; push identifier error_message_sender_is_not_my_owner
GETGLOB 12
DUP
LESSINT 2
PUSHCONT {
	DROP
	PUSHINT 100
}
IF
; function isExternalOwner
;; return
;; push identifier external_owner_pubkey_
GETGLOB 11
NEQINT 0
;; short-circuiting &&
DUP
PUSHCONT {
	DROP
	;; push identifier external_owner_pubkey_
	GETGLOB 11
	;; ==
	GETGLOB 5
	DUP
	ISNULL
	PUSHCONT {
		DROP
		PUSHINT 0
	}
	IF
	EQUAL
}
IF
; end function isExternalOwner
THROWANYIFNOT
; function testTransferFrom
ACCEPT
PUSHREF {
}
;; decl: empty
;; Remote call ITONTokenWallet.transferFrom
;; push identifier grams
;; push identifier wallet
PUSH2 S4, S1
NEWC
STSLICECONST x62_
STSLICE
SWAP
STGRAMS
PUSHINT 1
STUR 107
NEWC
STSLICECONST x29c4897e
;; from
;; push identifier from
PUSH S5
STSLICER
NEWC
;; to
;; push identifier to
PUSH S5
STSLICER
;; tokens
;; push identifier tokens
PUSH S8
STUR 128
;; grams
PUSHINT 128
STZEROES
NEWC
;; send_gas_to
MYADDR
STSLICER
;; notify_receiver
STONE
;; payload
;; push identifier empty
PUSH S4
STREFR
STBREFR
STBREFR
STBREFR
ENDC
PUSHINT 0
SENDRAWMSG
; end function testTransferFrom
; end modifier onlyExternalOwner
BLKDROP 6
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro deployEmptyWallet
DROP
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
LDUQ 128
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 128
}
IFNOT
ENDS
;; param: root_address
;; param: grams
; modifier onlyExternalOwner
;; push identifier error_message_sender_is_not_my_owner
GETGLOB 12
DUP
LESSINT 2
PUSHCONT {
	DROP
	PUSHINT 100
}
IF
; function isExternalOwner
;; return
;; push identifier external_owner_pubkey_
GETGLOB 11
NEQINT 0
;; short-circuiting &&
DUP
PUSHCONT {
	DROP
	;; push identifier external_owner_pubkey_
	GETGLOB 11
	;; ==
	GETGLOB 5
	DUP
	ISNULL
	PUSHCONT {
		DROP
		PUSHINT 0
	}
	IF
	EQUAL
}
IF
; end function isExternalOwner
THROWANYIFNOT
; function deployEmptyWallet
ACCEPT
;; Remote call IRootTokenContract.deployEmptyWallet
;; push identifier root_address
PUSH S1
NEWC
STSLICECONST x62_
STSLICE
PUSHSLICE x43b9aca00000000000000000000000000003_
STSLICER
NEWC
STSLICECONST x542b1672
;; deploy_grams
;; push identifier grams
PUSH S2
STUR 128
;; wallet_public_key
PUSHINT 256
STZEROES
;; owner_address
MYADDR
STSLICER
;; gas_back_address
;; address.makeAddrStd()
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
NEWC
STSLICE 
STBREFR
STBREFR
ENDC
PUSHINT 0
SENDRAWMSG
; end function deployEmptyWallet
; end modifier onlyExternalOwner
DROP2
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro sendTransaction
DROP
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
LDUQ 128
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 128
}
IFNOT
LDIQ 1
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDI 1
}
IFNOT
LDUQ 8
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 8
}
IFNOT
;; decode TvmCell
LDREF
ENDS
;; param: dest
;; param: value
;; param: bounce
;; param: flags
;; param: payload
CALLREF {
	CALL $sendTransaction_internal_macro$
}
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	sendTransaction_internal
.type	sendTransaction_internal, @function
CALL $sendTransaction_internal_macro$

.macro sendTransaction_internal_macro
;; param: dest
;; param: value
;; param: bounce
;; param: flags
;; param: payload
; modifier onlyExternalOwner
;; push identifier error_message_sender_is_not_my_owner
GETGLOB 12
DUP
LESSINT 2
PUSHCONT {
	DROP
	PUSHINT 100
}
IF
; function isExternalOwner
;; return
;; push identifier external_owner_pubkey_
GETGLOB 11
NEQINT 0
;; short-circuiting &&
DUP
PUSHCONT {
	DROP
	;; push identifier external_owner_pubkey_
	GETGLOB 11
	;; ==
	GETGLOB 5
	DUP
	ISNULL
	PUSHCONT {
		DROP
		PUSHINT 0
	}
	IF
	EQUAL
}
IF
; end function isExternalOwner
THROWANYIFNOT
; function sendTransaction
ACCEPT
;; transfer()
;; push identifier value
;; push identifier dest
;; push identifier bounce
PUSH3 S3, S4, S2
NEWC
STSLICECONST x6_
STI 1
PUSHINT 3
STZEROES
STSLICE
SWAP
STGRAMS
PUSHINT 1
STUR 107
;; push identifier payload
PUSH S1
STREFR
ENDC
;; push identifier flags
PUSH S2
SENDRAWMSG
; end function sendTransaction
; end modifier onlyExternalOwner
BLKDROP 5

.macro c7_to_c4
GETGLOB 6
GETGLOB 3
GETGLOB 2
NEWC
STU 256
STU 64
STU 1
GETGLOB 10
STUR 256
GETGLOB 11
STUR 256
GETGLOB 12
STUR 8
GETGLOB 13
SWAP
STDICT
GETGLOB 14
NEWC
STSLICE 
STBREFR
ENDC
POP C4

.macro c4_to_c7
PUSHROOT
CTOS        ; c4
LDU 256      ; pubkey c4
LDU 64      ; pubkey timestamp c4
LDU 1       ; pubkey [timestamp] constructor_flag memory
LDU 256
LDU 256
LDU 8
LDDICT
;; load next cell
LDREF
ENDS
CTOS
LDMSGADDR
ENDS
SETGLOB 14
SETGLOB 13
SETGLOB 12
SETGLOB 11
SETGLOB 10
TRUE
SETGLOB 8
; pubkey [timestamp] constructor_flag
SETGLOB 6   ; pubkey [timestamp]
SETGLOB 3   ; D
SETGLOB 2

.macro c4_to_c7_with_init_storage
PUSHROOT
CTOS        ; c4
DUP        ; c4 c4
SBITS      ; c4 bits
GTINT 1    ; c4 bits>1
PUSHCONT {
	LDU 256      ; pubkey c4
	LDU 64      ; pubkey timestamp c4
	LDU 1       ; pubkey [timestamp] constructor_flag memory
	LDU 256
	LDU 256
	LDU 8
	LDDICT
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
	ENDS
	SETGLOB 14
	SETGLOB 13
	SETGLOB 12
	SETGLOB 11
	SETGLOB 10
	TRUE
	SETGLOB 8
	; pubkey [timestamp] constructor_flag
	SETGLOB 6   ; pubkey [timestamp]
	SETGLOB 3   ; D
	SETGLOB 2
}
PUSHCONT {
	PLDDICT   ; D
	; init _randomNonce
	PUSHINT 1
	PUSH S1
	PUSHINT 64
	DICTUGET
	PUSHCONT {
		PLDU 256
	}
	PUSHCONT {
		PUSHINT 0
	}
	IFELSE
	SETGLOB 10
	; init external_owner_pubkey_
	PUSHINT 2
	PUSH S1
	PUSHINT 64
	DICTUGET
	PUSHCONT {
		PLDU 256
	}
	PUSHCONT {
		PUSHINT 0
	}
	IFELSE
	SETGLOB 11
	; init error_message_sender_is_not_my_owner
	PUSHINT 0
	SETGLOB 12
	; init change_directions
	NEWDICT
	SETGLOB 13
	; init latest_bounced_from
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	SETGLOB 14
	; set contract pubkey
	PUSHINT 0
	SWAP
	PUSHINT 64
	DICTUGET
	THROWIFNOT 61
	PLDU 256
	SETGLOB 2
	PUSHINT 0 ; timestamp
	SETGLOB 3
	PUSHINT 0 ; constructor_flag
	SETGLOB 6
TRUE
SETGLOB 8
	;; init state var: error_message_sender_is_not_my_owner
	PUSHINT 100
	SETGLOB 12
}
IFELSE

.internal-alias :main_internal, 0
.internal :main_internal
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Function: main_internal
;; param: contract_balance
;; param: msg_balance
;; param: int_msg_info
;; param: msg_body_slice
;; param: transaction_type
PUSH S2
CTOS
PLDU 4
MODPOW2 1
IFRET
PUSH S1    ; body
SEMPTY     ; isEmpty
IFRET
PUSH S1 ; body
LDUQ 32  ; [funcId] body' ok
THROWIFNOT 60 ; funcId body'
PUSH S1 ; funcId body' funcId
IFNOTRET
SWAP
CALLREF {
	CALL $public_function_selector$
}
GETGLOB 7
ISNULL
THROWIF 60

.internal-alias :main_external, -1
.internal :main_external
PUSH S1
CALLREF {
	CALL $c4_to_c7_with_init_storage$
}
LDU 1 ; haveSign msgSlice
SWAP
PUSHCONT {
	PUSHINT 512
	LDSLICEX ; signatureSlice msgSlice
	DUP      ; signatureSlice msgSlice msgSlice
	HASHSU   ; signatureSlice msgSlice hashMsgSlice
	SWAP  ; signatureSlice hashMsgSlice msgSlice
	LDU 1 ; signatureSlice hashMsgSlice havePubkey msgSlice
	SWAP  ; signatureSlice hashMsgSlice msgSlice havePubkey
	PUSHCONT {
		LDU 256       ; signatureSlice hashMsgSlice pubkey msgSlice
		XCHG s3
		SWAP
	}
	PUSHCONT {
		XCHG s2
		GETGLOB 2
	}
	IFELSE
	DUP
	SETGLOB 5
	CHKSIGNU      ; msgSlice isSigned
	THROWIFNOT 40 ; msgSlice
}
PUSHCONT {
	LDU 1      ; havePubkey msgSlice
	SWAP       ; msgSlice havePubkey
	THROWIF 58 ; msgSlice
}
IFELSE
LDU 64                         ; timestamp msgSlice
SWAP                           ; msgSlice timestamp
CALL $replay_protection_macro$ ; msgSlice
LDU 32  ; expireAt msgSlice
SWAP    ; msgSlice expireAt
NOW     ; msgSlice expireAt now
GREATER ; msgSlice expireAt>now
THROWIFNOT 57
LDU  32 ; funcId body
SWAP    ; body funcId
CALLREF {
	CALL $public_function_selector$
}
GETGLOB 7
ISNULL
THROWIF 60

.macro latest_bounced_from
DROP
ENDS
CALLREF {
	CALL $c4_to_c7$
}
;; emitting 1 value
DUP
EQINT -1
PUSHCONT {
	GETGLOB 14
	PUSHSLICE xc0000000000000000000000000eeaff1af
	NEWC
	STSLICE
	PUSH S1
	STSLICER
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
IF
DROP
TRUE
SETGLOB 7

.macro public_function_selector
DUP
PUSHINT 1129462832
LEQ
PUSHCONT {
	DUP
	PUSHINT 913194251
	EQUAL
	IFJMPREF {
		CALL $subscribeForTransfers$
	}
	DUP
	PUSHINT 981825104
	EQUAL
	IFJMPREF {
		CALL $tokensBouncedCallback$
	}
	DUP
	PUSHINT 1129462832
	EQUAL
	IFJMPREF {
		CALL $deployEmptyWallet$
	}
}
IFJMP
DUP
PUSHINT 1756716863
LEQ
PUSHCONT {
	DUP
	PUSHINT 1290691692
	EQUAL
	IFJMPREF {
		CALL $sendTransaction$
	}
	DUP
	PUSHINT 1497440185
	EQUAL
	IFJMPREF {
		CALL $tokensReceivedCallback$
	}
	DUP
	PUSHINT 1756716863
	EQUAL
	IFJMPREF {
		CALL $constructor$
	}
}
IFJMP
DUP
PUSHINT 2072076462
LEQ
PUSHCONT {
	DUP
	PUSHINT 1827837911
	EQUAL
	IFJMPREF {
		CALL $testTransferFrom$
	}
	DUP
	PUSHINT 1857024431
	EQUAL
	IFJMPREF {
		CALL $latest_bounced_from$
	}
	DUP
	PUSHINT 2072076462
	EQUAL
	IFJMPREF {
		CALL $burnMyTokens$
	}
}
IFJMP
